/*
 * This script is based on examples shipped with Sourcery CodeBench Lite.
 * Pavel Kirienko, 2013 (pavel.kirienko@gmail.com)
 */

/* Default stack sizes. These are used by the startup in order to allocate stacks for the different modes. */
__Stack_Size = 1024 ;

PROVIDE ( _Stack_Size = __Stack_Size ) ;

__Stack_Init = _estack  - __Stack_Size ;

/* "PROVIDE" allows to easily override these values from an object file or the commmand line. */
PROVIDE ( _Stack_Init = __Stack_Init ) ;

/* There will be a link error if there is not this amount of RAM free at the end. */
_Minimum_Stack_Size = 16384;

MEMORY
{
	FLASH (rx) : ORIGIN = 0x08000000, LENGTH = 256K
	RAM (xrw) :  ORIGIN = 0x20000000, LENGTH = 64K
}

/* higher address of the user mode stack */
_estack = 0x20010000;

SECTIONS
{
	.isr_vector :
	{
		. = ALIGN(4);
		KEEP(*(.isr_vector))  /* startup code */
		. = ALIGN(4);
	} >FLASH

	.text :
	{
		. = ALIGN(4);
		*(.text)        /* code */
		*(.text.*)
		
		*(.rodata)      /* constants */
		*(.rodata*)
		
		*(.glue_7)      /* ARM->Thumb and Thumb->ARM glue code */
		*(.glue_7t)
		
		KEEP (*(.init))
		KEEP (*(.fini))
		
		. = ALIGN(4);
		_etext = .;
	} >FLASH
	
	.ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } >FLASH
	.ARM : {
		__exidx_start = .;
		*(.ARM.exidx*)
		__exidx_end = .;
	} >FLASH

	.ARM.attributes : { *(.ARM.attributes) } > FLASH
	
	_sidata = .;

	/* This is the initialized data section
	The program executes knowing that the data is in the RAM
	but the loader puts the initial values in the FLASH (inidata).
	It is one task of the startup to copy the initial values from FLASH to RAM. */
	.data : AT (_sidata)
	{
		. = ALIGN(4);
		_sdata = . ;
		*(.data)
		*(.data.*)
		
		. = ALIGN(4);
		_edata = . ;
	} >RAM

	/* This is the uninitialized data section */
	. = ALIGN(4);
	.bss :
	{
		_sbss = .;
		*(.bss)
		*(.bss*)
		*(COMMON)

		. = ALIGN(4);
		_ebss = . ;
	} >RAM
	
	PROVIDE ( end = _ebss );
	PROVIDE ( _end = _ebss );
	
	/* This is the user stack section 
	This is just to check that there is enough RAM left for the User mode stack
	It should generate an error if it's full.
	*/
	._usrstack :
	{
		. = ALIGN(4);
		_susrstack = . ;
		
		. = . + _Minimum_Stack_Size ;
		
		. = ALIGN(4);
		_eusrstack = . ;
	} >RAM
	
	/* after that it's only debugging information. */
	
	/* remove the debugging information from the standard libraries */
	DISCARD :
	{
		libc.a ( * )
		libm.a ( * )
		libgcc.a ( * )
	}

	/* Stabs debugging sections.  */
	.stab          0 : { *(.stab) }
	.stabstr       0 : { *(.stabstr) }
	.stab.excl     0 : { *(.stab.excl) }
	.stab.exclstr  0 : { *(.stab.exclstr) }
	.stab.index    0 : { *(.stab.index) }
	.stab.indexstr 0 : { *(.stab.indexstr) }
	.comment       0 : { *(.comment) }
	/* DWARF debug sections.
	Symbols in the DWARF debugging sections are relative to the beginning
	of the section so we begin them at 0.  */
	/* DWARF 1 */
	.debug          0 : { *(.debug) }
	.line           0 : { *(.line) }
	/* GNU DWARF 1 extensions */
	.debug_srcinfo  0 : { *(.debug_srcinfo) }
	.debug_sfnames  0 : { *(.debug_sfnames) }
	/* DWARF 1.1 and DWARF 2 */
	.debug_aranges  0 : { *(.debug_aranges) }
	.debug_pubnames 0 : { *(.debug_pubnames) }
	/* DWARF 2 */
	.debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
	.debug_abbrev   0 : { *(.debug_abbrev) }
	.debug_line     0 : { *(.debug_line) }
	.debug_frame    0 : { *(.debug_frame) }
	.debug_str      0 : { *(.debug_str) }
	.debug_loc      0 : { *(.debug_loc) }
	.debug_macinfo  0 : { *(.debug_macinfo) }
	/* SGI/MIPS DWARF 2 extensions */
	.debug_weaknames 0 : { *(.debug_weaknames) }
	.debug_funcnames 0 : { *(.debug_funcnames) }
	.debug_typenames 0 : { *(.debug_typenames) }
	.debug_varnames  0 : { *(.debug_varnames) }
}
